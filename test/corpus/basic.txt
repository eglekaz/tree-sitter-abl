================================================================================
COMMENT statement
================================================================================

/* comment */

--------------------------------------------------------------------------------

(source_code
		(comment))


================================================================================
VARIABLE DEFINITION statement
================================================================================

DEFINE VARIABLE full_variable AS INTEGER.
DEFINE VAR  full_var AS INTEGER.

DEF VARIABLE short_variable AS INTEGER.
DEF VAR short_var AS INTEGER.

DEFINE VARIABLE no_undo AS INTEGER NO-UNDO.
DEFINE VARIABLE initial AS INTEGER INITIAL 5.

--------------------------------------------------------------------------------

(source_code
	(statement
		(variable_definition
			(identifier)
			(primitive_type)
			(terminator)))
	(statement
		(variable_definition
			(identifier)
			(primitive_type)
			(terminator)))
	(statement
		(variable_definition
			(identifier)
			(primitive_type)
			(terminator)))
	(statement
		(variable_definition
			(identifier)
			(primitive_type)
			(terminator)))
	(statement
		(variable_definition
			(identifier)
			(primitive_type)
			(variable_tuning)
			(terminator)))
	(statement
		(variable_definition
			(identifier)
			(primitive_type)
			(variable_tuning
				(expression
					(number_literal)))
			(terminator))))
		


================================================================================
VARIABLE ASSIGNMENT statement
================================================================================

DEFINE VARIABLE variable AS INTEGER.
variable = 5.

--------------------------------------------------------------------------------


(source_code
	(statement
		(variable_definition
			(identifier)
			(primitive_type)
			(terminator)))
	(statement
		(variable_assignment
		  (assignment
			  (identifier)
				(expression
				  (number_literal)))
			(terminator))))	
			
================================================================================
IF statement
================================================================================

IF x > 10 THEN DO:
	x = 10.
END.

--------------------------------------------------------------------------------

(source_code
	(statement
		(if_statement
			(if_do_statement
				(conditions
					(expression
						(comparison
							(expression
								(identifier))
              (comparator)
							(expression
								(number_literal)))))
				(statement
					(variable_assignment
						(assignment
							(identifier)
							(expression
								(number_literal)))
						(terminator)))
				(block_terminator)))))

================================================================================
IF ELSE DO statement
================================================================================

IF x > 10 THEN DO:
	x = 10.
END.
ELSE DO:
  x = x.
END.

--------------------------------------------------------------------------------

(source_code
	(statement
		(if_statement
			(if_do_statement
				(conditions
					(expression
						(comparison
							(expression
								(identifier))
              (comparator)
							(expression
								(number_literal)))))
				(statement
					(variable_assignment
						(assignment
							(identifier)
							(expression
								(number_literal)))
						(terminator)))						
				(block_terminator)
				(else_do_statement
					(statement
						(variable_assignment
							(assignment
								(identifier)
								(expression
									(identifier)))
							(terminator)))
					(block_terminator))))))

================================================================================
IF ELSE IF statement
================================================================================

IF x > 10 THEN DO:
	x = 10.
END.
ELSE IF x < 10 OR x = 0 THEN DO:
  x = x.
END.
ELSE DO:
	x = x.
END.

--------------------------------------------------------------------------------

(source_code
	(statement
		(if_statement
			(if_do_statement
				(conditions
					(expression
						(comparison
							(expression
								(identifier))
              (comparator)
							(expression
								(number_literal)))))
				(statement
					(variable_assignment
						(assignment
							(identifier)
							(expression
								(number_literal)))
						(terminator)))						
				(block_terminator)
				(else_do_if_statement
					(conditions
						(expression
							(comparison
								(expression
									(identifier))
                (comparator)
								(expression
									(number_literal))))
						(expression
							(comparison
								(expression
									(identifier))
                (comparator)
								(expression
									(number_literal)))))
					(statement
						(variable_assignment
							(assignment
								(identifier)
								(expression
									(identifier)))
							(terminator)))
					(block_terminator))
				(else_do_statement
					(statement
						(variable_assignment
							(assignment
								(identifier)
								(expression
									(identifier)))
							(terminator)))
					(block_terminator))))))

================================================================================
IF THEN statement
================================================================================

IF x > 10 THEN x = 10.

--------------------------------------------------------------------------------

(source_code
	(statement
		(if_statement
			(if_then_statement
				(conditions
					(expression
						(comparison
							(expression
								(identifier))
              (comparator)
							(expression
								(number_literal)))))
				(terminated_statement
					(variable_assignment
						(assignment
							(identifier)
							(expression
								(number_literal)))
						(terminator)))))))

================================================================================
IF ELSE THEN statement
================================================================================

IF x > 10 THEN x = 10.
ELSE x = x.

--------------------------------------------------------------------------------

(source_code
	(statement
		(if_statement
			(if_then_statement
			  (conditions
					(expression
						(comparison
							(expression
								(identifier))
              (comparator)
							(expression
								(number_literal)))))
				(terminated_statement
					(variable_assignment
						(assignment
							(identifier)
							(expression
								(number_literal)))
						(terminator)))
				(else_then_statement
					(terminated_statement
						(variable_assignment
							(assignment
								(identifier)
								(expression
									(identifier)))
							(terminator))))))))

================================================================================
REPEAT statement
================================================================================

REPEAT:
	x = 5.
END.

--------------------------------------------------------------------------------

(source_code
  (statement
    (loop_statement
      (repeat_statement
        (statement
          (variable_assignment
            (assignment
              (identifier)
              (expression
                (number_literal)))
            (terminator)))
        (block_terminator)))))

================================================================================
DO WHILE statement
================================================================================

DO WHILE x < 10:
	x = 5.
END.


--------------------------------------------------------------------------------

(source_code
	(statement
		(loop_statement
			(do_while_statement
				(conditions
					(expression
						(comparison
							(expression
								(identifier))
              (comparator)
							(expression
								(number_literal)))))
				(statement
					(variable_assignment
						(assignment
							(identifier)
							(expression
								(number_literal)))
						(terminator)))
				(block_terminator)))))

================================================================================
DO statement
================================================================================

DO x = 5 TO 20:
	x = 5.
END.


--------------------------------------------------------------------------------

(source_code
	(statement
		(loop_statement
			(do_statement
				(assignment
					(identifier)
					(expression
						(number_literal)))
				(number_literal)
				(statement
					(variable_assignment
						(assignment
							(identifier)
							(expression
								(number_literal)))
						(terminator)))
				(block_terminator)))))

================================================================================
PROCEDURE statement
================================================================================

PROCEDURE some_procedure:
  /* nice */
END PROCEDURE.

RUN some_procedure.

--------------------------------------------------------------------------------

(source_code
  (statement
    (procedure_statement
      (identifier)
      (comment)
      (block_terminator)))
    (statement
      (abl_statement
        (identifier)
        (expression
          (identifier))
        (terminator))))

================================================================================
FUNCTION statement
================================================================================

FUNCTION fn RETURNS INTEGER (INPUT par1 AS INTEGER):
  RETURN par1.
END PROCEDURE.

--------------------------------------------------------------------------------

(source_code
  (statement
    (function_statement
      (identifier)
      (primitive_type)
      (function_parameter
        (function_parameter_mode)
        (identifier)
        (primitive_type))
      (statement
        (return_statement
          (identifier)
          (terminator)))
      (block_terminator))))

================================================================================
ABL GENERIC statement
================================================================================

DISPLAY "test" a 5 f().

--------------------------------------------------------------------------------

(source_code
	(statement
		(abl_statement
			(identifier)
			(expression
				(string_literal
					(double_quoted_string)))
			(expression
				(identifier))
			(expression
				(number_literal))
			(expression
				(function_call
					(identifier)))
			(terminator))))

================================================================================
ASSIGN statement
================================================================================

ASSIGN 
	a = 1
	b = "ABC"
	c = f()
.

--------------------------------------------------------------------------------


(source_code
	(statement
		(abl_statement
			(assign_statement
				(assignment
					(identifier)
					(expression
						(number_literal)))
				(assignment
					(identifier)
					(expression
						(string_literal
							(double_quoted_string))))
				(assignment
					(identifier)
					(expression
						(function_call
							(identifier))))
						(terminator)))))

================================================================================
FOR EACH statement
================================================================================

FOR EACH some_table WHERE x = 5 NO-LOCK:
	DISPLAY some_table.
END.


--------------------------------------------------------------------------------

(source_code
	(statement
		(for_statement
			(identifier)
			(where_clause
				(conditions
					(expression
						(comparison
							(expression
								(identifier))
              (comparator)
							(expression
								(number_literal))))))
			(query_tuning)
			(statement
				(abl_statement
					(identifier)
					(expression
						(identifier))
					(terminator)))
			(block_terminator))))

================================================================================
FOR EACH (sorted) statement
================================================================================

FOR EACH some_table WHERE x = 5 BREAK BY col1 DESCENDING col2:
	DISPLAY some_table.
END.

--------------------------------------------------------------------------------

 (source_code
	(statement
		(for_statement
			(identifier)
			(where_clause
				(conditions
					(expression
						(comparison
							(expression
								(identifier))
              (comparator)
							(expression
								(number_literal))))))
			(sort_clause
				(sort_column
					(identifier)
					(sort_order))
				(sort_column
					(identifier)))
			(statement
				(abl_statement
					(identifier)
					(expression
						(identifier))
					(terminator)))
			(block_terminator))))
      
================================================================================
OBJECT ACCESSORS statement
================================================================================

DISPLAY some_object:root.
DISPLAY some_object:chained_property:chained_another:method().

--------------------------------------------------------------------------------

 (source_code
  (statement
    (abl_statement
      (identifier)
      (expression
        (object_property
          (identifier)
          (identifier)))
      (terminator)))
  (statement
    (abl_statement
      (identifier)
      (expression
        (object_property
          (identifier)
          (identifier)
          (identifier)
          (function_call
            (identifier))))
      (terminator))))